// Generated by CoffeeScript 1.8.0
(function() {
  var Cacher;

  module.exports = Cacher = (function() {
    function Cacher(firebaseRef, feedsAndPosts, callback) {
      this.callback = callback;
      this.cacheRef = firebaseRef.child('cache');
      this.cacheRef.on('value', (function(_this) {
        return function(snapshot) {
          var cache;
          _this.cacheRef.off();
          cache = snapshot.val();
          if (cache == null) {
            cache = [];
          }
          _this.feedsWithNewPosts = _this.getFeedsWithNewPosts(feedsAndPosts, cache);
          console.log("feeds with new posts");
          console.log(_this.feedsWithNewPosts);
          return _this.updateCache(feedsAndPosts);
        };
      })(this));
    }

    Cacher.prototype.getFeedsWithNewPosts = function(feedsAndPosts, cache) {
      var c, feedUrl, lastCachedUrls, posts, result, _fn, _i, _len;
      lastCachedUrls = {};
      for (_i = 0, _len = cache.length; _i < _len; _i++) {
        c = cache[_i];
        lastCachedUrls[c.feedUrl] = c.latestPostUrl;
      }
      console.log("cache");
      console.log(lastCachedUrls);
      result = {};
      _fn = function(feedUrl, posts) {
        var error, lastPostUrl, newPosts, post, postsClone;
        lastPostUrl = lastCachedUrls[feedUrl];
        if (lastPostUrl) {
          postsClone = posts.clone();
          newPosts = [];
          try {
            return newPosts = ((function() {
              var _results;
              _results = [];
              while ((post = postsClone.shift()).link !== lastPostUrl) {
                _results.push(post);
              }
              return _results;
            })());
          } catch (_error) {
            error = _error;
            console.log(feedUrl);
            return console.log('Cached lastest post URL is not found.');
          } finally {
            if (newPosts.length > 0) {
              result[feedUrl] = newPosts;
            }
          }
        }
      };
      for (feedUrl in feedsAndPosts) {
        posts = feedsAndPosts[feedUrl];
        _fn(feedUrl, posts);
      }
      return result;
    };

    Cacher.prototype.updateCache = function(feedsAndPosts) {
      var cache, posts, url;
      cache = [];
      for (url in feedsAndPosts) {
        posts = feedsAndPosts[url];
        cache.push({
          feedUrl: url,
          latestPostUrl: posts[0].link
        });
      }
      return this.cacheRef.set(cache, (function(_this) {
        return function(error) {
          if (error) {
            console.log('error happened while saving cache');
            return process.exit(1);
          } else {
            return _this.callback(_this.feedsWithNewPosts);
          }
        };
      })(this));
    };

    return Cacher;

  })();

}).call(this);
