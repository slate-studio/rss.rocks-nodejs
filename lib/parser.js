// Generated by CoffeeScript 1.7.1
(function() {
  var FeedParser, Iconv, Parser, getParams, request;

  FeedParser = require('feedparser');

  request = require('request');

  Iconv = require('iconv').Iconv;

  getParams = function(str) {
    var params;
    params = str.split(';').reduce((function(params, param) {
      var parts;
      parts = param.split('=').map(function(part) {
        return part.trim();
      });
      if (parts.length === 2) {
        params[parts[0]] = parts[1];
      }
      return params;
    }), {});
    return params;
  };

  module.exports = Parser = (function() {
    function Parser(urls, onFetchedCallback) {
      this.urls = urls;
      this.onFetchedCallback = onFetchedCallback;
      this.urlsCount = this.urls.length;
      this.urlsFetched = 0;
      this.posts = {};
      this.urls.map((function(_this) {
        return function(url) {
          _this.posts[url] = [];
          return _this.fetch(url);
        };
      })(this));
    }

    Parser.prototype.fetch = function(url) {
      var feedparser, posts, req;
      req = request(url, {
        timeout: 10000,
        pool: false
      });
      req.setMaxListeners(50);
      req.setHeader('user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36').setHeader('accept', 'text/html,application/xhtml+xml');
      feedparser = new FeedParser();
      req.on('error', (function(_this) {
        return function() {
          return _this.done();
        };
      })(this));
      req.on('response', function(res) {
        var charset, err, iconv, stream;
        stream = this;
        if (res.statusCode !== 200) {
          return this.emit('error', new Error('Bad status code'));
        }
        charset = getParams(res.headers['content-type'] || '').charset;
        if (!iconv && charset && !/utf-*8/i.test(charset)) {
          try {
            iconv = new Iconv(charset, 'utf-8');
            console.log('Converting from charset %s to utf-8', charset);
            iconv.on('error', (function(_this) {
              return function() {
                return _this.done();
              };
            })(this));
            stream = this.pipe(iconv);
          } catch (_error) {
            err = _error;
            this.emit('error', err);
          }
        }
        return stream.pipe(feedparser);
      });
      feedparser.on('error', (function(_this) {
        return function() {
          return _this.done();
        };
      })(this));
      feedparser.on('end', (function(_this) {
        return function() {
          return _this.done();
        };
      })(this));
      posts = this.posts;
      return feedparser.on('readable', function() {
        var post, _results;
        _results = [];
        while ((post = this.read())) {
          _results.push(posts[url].push({
            title: post.title,
            link: post.link
          }));
        }
        return _results;
      });
    };

    Parser.prototype.done = function(err) {
      if (err) {
        console.log(err, err.stack);
      }
      this.urlsFetched += 1;
      console.log('fetched ' + this.urlsFetched + ' out of ' + this.urlsCount);
      if (this.urlsFetched === this.urlsCount) {
        return this.onFetchedCallback(this.posts);
      }
    };

    return Parser;

  })();

}).call(this);
