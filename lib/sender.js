// Generated by CoffeeScript 1.8.0
(function() {
  var Postmark, Sender;

  Postmark = require("postmark")(process.env.POSTMARK_API_KEY);

  module.exports = Sender = (function() {
    function Sender(users, feedsAndPostsToSend, callback) {
      var emails;
      this.users = users;
      emails = this.generateEmails(feedsAndPostsToSend);
      if (emails.length > 0) {
        this.sendEmails(emails, callback);
      } else {
        console.log('no emails to send');
        callback();
      }
    }

    Sender.prototype.sendEmails = function(emails, callback) {
      return Postmark.batch(emails, function(error, success) {
        if (error) {
          console.error("Unable to send via postmark: " + error.message);
        }
        console.log("" + emails.length + " emails sent");
        return callback();
      });
    };

    Sender.prototype.generateEmails = function(feeds) {
      var emails, profile, uid, _fn, _ref;
      emails = [];
      _ref = this.users;
      _fn = function(uid, profile) {
        var id, s, _ref1, _results;
        _ref1 = profile.subscriptions;
        _results = [];
        for (id in _ref1) {
          s = _ref1[id];
          _results.push((function(id, s) {
            var emls, p, posts;
            posts = feeds[s.url];
            if (posts) {
              emls = (function() {
                var _i, _len, _results1;
                _results1 = [];
                for (_i = 0, _len = posts.length; _i < _len; _i++) {
                  p = posts[_i];
                  _results1.push({
                    "From": "rss@kra.vc",
                    "To": profile.email,
                    "Subject": s.name,
                    "TextBody": "" + p.title + "\n" + p.link
                  });
                }
                return _results1;
              })();
              return emails.appendArray(emls);
            }
          })(id, s));
        }
        return _results;
      };
      for (uid in _ref) {
        profile = _ref[uid];
        _fn(uid, profile);
      }
      return emails;
    };

    return Sender;

  })();

}).call(this);
